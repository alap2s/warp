rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
      
      match /friends/{friendId} {
        allow read: if request.auth != null;
        // Writes are now handled by the acceptInvite Cloud Function
        allow create, delete: if false;
      }
    }

    match /warps/{warpId} {
      allow read: if request.auth != null && 
                      (resource.data.type == 'public' || !(resource.data.keys().hasAll(['type']))) ||
                       resource.data.ownerId == request.auth.uid ||
                       exists(/databases/$(database)/documents/users/$(request.auth.uid)/friends/$(resource.data.ownerId));
      
      allow create: if request.auth.uid == request.resource.data.ownerId
                      && request.resource.data.participants == []
                      && (request.resource.data.type == 'public' || request.resource.data.type == 'friends');

      allow update: if request.auth.uid == resource.data.ownerId || 
                       (request.auth.uid != resource.data.ownerId &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['participants']) &&
                        (request.resource.data.participants.size() == resource.data.participants.size() + 1 ||
                         request.resource.data.participants.size() == resource.data.participants.size() - 1) &&
                        (request.resource.data.participants.hasAny([request.auth.uid]) ||
                         resource.data.participants.hasAny([request.auth.uid])) &&
                        request.resource.data.participants.size() <= 20);

      allow delete: if request.auth.uid == resource.data.ownerId;
    }
    
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid == request.resource.data.actorId;
    }
    
    match /invites/{inviteId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read, update: if request.auth != null;
    }
  }
}
